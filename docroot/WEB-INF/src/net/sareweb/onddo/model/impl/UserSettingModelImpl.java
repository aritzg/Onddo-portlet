/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.onddo.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.onddo.model.UserSetting;
import net.sareweb.onddo.model.UserSettingModel;
import net.sareweb.onddo.model.UserSettingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the UserSetting service. Represents a row in the &quot;Onddo_UserSetting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.onddo.model.UserSettingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserSettingImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see UserSettingImpl
 * @see net.sareweb.onddo.model.UserSetting
 * @see net.sareweb.onddo.model.UserSettingModel
 * @generated
 */
@JSON(strict = true)
public class UserSettingModelImpl extends BaseModelImpl<UserSetting>
	implements UserSettingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user setting model instance should use the {@link net.sareweb.onddo.model.UserSetting} interface instead.
	 */
	public static final String TABLE_NAME = "Onddo_UserSetting";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userSettingId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "visibilityToFriends", Types.VARCHAR },
			{ "visibilityToOthers", Types.VARCHAR },
			{ "tweetPicking", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Onddo_UserSetting (userSettingId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,visibilityToFriends VARCHAR(75) null,visibilityToOthers VARCHAR(75) null,tweetPicking BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Onddo_UserSetting";
	public static final String ORDER_BY_JPQL = " ORDER BY userSetting.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Onddo_UserSetting.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.onddo.model.UserSetting"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.onddo.model.UserSetting"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.net.sareweb.onddo.model.UserSetting"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserSetting toModel(UserSettingSoap soapModel) {
		UserSetting model = new UserSettingImpl();

		model.setUserSettingId(soapModel.getUserSettingId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setVisibilityToFriends(soapModel.getVisibilityToFriends());
		model.setVisibilityToOthers(soapModel.getVisibilityToOthers());
		model.setTweetPicking(soapModel.getTweetPicking());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserSetting> toModels(UserSettingSoap[] soapModels) {
		List<UserSetting> models = new ArrayList<UserSetting>(soapModels.length);

		for (UserSettingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.onddo.model.UserSetting"));

	public UserSettingModelImpl() {
	}

	public long getPrimaryKey() {
		return _userSettingId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUserSettingId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_userSettingId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return UserSetting.class;
	}

	public String getModelClassName() {
		return UserSetting.class.getName();
	}

	@JSON
	public long getUserSettingId() {
		return _userSettingId;
	}

	public void setUserSettingId(long userSettingId) {
		_userSettingId = userSettingId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getVisibilityToFriends() {
		if (_visibilityToFriends == null) {
			return StringPool.BLANK;
		}
		else {
			return _visibilityToFriends;
		}
	}

	public void setVisibilityToFriends(String visibilityToFriends) {
		_visibilityToFriends = visibilityToFriends;
	}

	@JSON
	public String getVisibilityToOthers() {
		if (_visibilityToOthers == null) {
			return StringPool.BLANK;
		}
		else {
			return _visibilityToOthers;
		}
	}

	public void setVisibilityToOthers(String visibilityToOthers) {
		_visibilityToOthers = visibilityToOthers;
	}

	@JSON
	public boolean getTweetPicking() {
		return _tweetPicking;
	}

	public boolean isTweetPicking() {
		return _tweetPicking;
	}

	public void setTweetPicking(boolean tweetPicking) {
		_tweetPicking = tweetPicking;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserSetting toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (UserSetting)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					UserSetting.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		UserSettingImpl userSettingImpl = new UserSettingImpl();

		userSettingImpl.setUserSettingId(getUserSettingId());
		userSettingImpl.setCompanyId(getCompanyId());
		userSettingImpl.setUserId(getUserId());
		userSettingImpl.setCreateDate(getCreateDate());
		userSettingImpl.setModifiedDate(getModifiedDate());
		userSettingImpl.setVisibilityToFriends(getVisibilityToFriends());
		userSettingImpl.setVisibilityToOthers(getVisibilityToOthers());
		userSettingImpl.setTweetPicking(getTweetPicking());

		userSettingImpl.resetOriginalValues();

		return userSettingImpl;
	}

	public int compareTo(UserSetting userSetting) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), userSetting.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		UserSetting userSetting = null;

		try {
			userSetting = (UserSetting)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = userSetting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserSettingModelImpl userSettingModelImpl = this;

		userSettingModelImpl._originalUserId = userSettingModelImpl._userId;

		userSettingModelImpl._setOriginalUserId = false;

		userSettingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserSetting> toCacheModel() {
		UserSettingCacheModel userSettingCacheModel = new UserSettingCacheModel();

		userSettingCacheModel.userSettingId = getUserSettingId();

		userSettingCacheModel.companyId = getCompanyId();

		userSettingCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userSettingCacheModel.createDate = createDate.getTime();
		}
		else {
			userSettingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userSettingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userSettingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userSettingCacheModel.visibilityToFriends = getVisibilityToFriends();

		String visibilityToFriends = userSettingCacheModel.visibilityToFriends;

		if ((visibilityToFriends != null) &&
				(visibilityToFriends.length() == 0)) {
			userSettingCacheModel.visibilityToFriends = null;
		}

		userSettingCacheModel.visibilityToOthers = getVisibilityToOthers();

		String visibilityToOthers = userSettingCacheModel.visibilityToOthers;

		if ((visibilityToOthers != null) && (visibilityToOthers.length() == 0)) {
			userSettingCacheModel.visibilityToOthers = null;
		}

		userSettingCacheModel.tweetPicking = getTweetPicking();

		return userSettingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{userSettingId=");
		sb.append(getUserSettingId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", visibilityToFriends=");
		sb.append(getVisibilityToFriends());
		sb.append(", visibilityToOthers=");
		sb.append(getVisibilityToOthers());
		sb.append(", tweetPicking=");
		sb.append(getTweetPicking());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.onddo.model.UserSetting");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userSettingId</column-name><column-value><![CDATA[");
		sb.append(getUserSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visibilityToFriends</column-name><column-value><![CDATA[");
		sb.append(getVisibilityToFriends());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visibilityToOthers</column-name><column-value><![CDATA[");
		sb.append(getVisibilityToOthers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tweetPicking</column-name><column-value><![CDATA[");
		sb.append(getTweetPicking());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserSetting.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			UserSetting.class
		};
	private long _userSettingId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _visibilityToFriends;
	private String _visibilityToOthers;
	private boolean _tweetPicking;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private UserSetting _escapedModelProxy;
}